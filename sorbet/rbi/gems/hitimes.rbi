# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/hitimes/all/hitimes.rbi
#
# hitimes-1.3.1

module Hitimes
  def raw_instant; end
  def self.measure(&block); end
  def self.raw_instant; end
end
module Hitimes::Paths
  def self.lib_path(*args); end
  def self.root_dir; end
  def self.sub_path(sub, *args); end
end
class Hitimes::Interval
  def duration; end
  def duration_so_far; end
  def length; end
  def measure; end
  def now; end
  def running?; end
  def self.measure; end
  def self.now; end
  def split; end
  def start; end
  def start_instant; end
  def started?; end
  def stop; end
  def stop_instant; end
  def stopped?; end
  def to_f; end
  def to_seconds; end
end
class Hitimes::Stats
  def count; end
  def max; end
  def mean; end
  def min; end
  def rate; end
  def stddev; end
  def sum; end
  def sumsq; end
  def to_hash(*args); end
  def to_json(*args); end
  def update(arg0); end
end
class Hitimes::MutexedStats < Hitimes::Stats
  def initialize; end
  def update(value); end
end
class Hitimes::Metric
  def additional_data; end
  def initialize(name, additional_data = nil); end
  def name; end
  def sampling_delta; end
  def sampling_start_time; end
  def sampling_stop_time; end
  def to_hash; end
  def utc_microseconds; end
end
class Hitimes::ValueMetric < Hitimes::Metric
  def count(*args, &block); end
  def initialize(name, additional_data = nil); end
  def max(*args, &block); end
  def mean(*args, &block); end
  def measure(value); end
  def min(*args, &block); end
  def stats; end
  def stddev(*args, &block); end
  def sum(*args, &block); end
  def sumsq(*args, &block); end
  def to_hash; end
  extend Forwardable
end
class Hitimes::TimedMetric < Hitimes::Metric
  def count(*args, &block); end
  def duration(*args, &block); end
  def initialize(name, additional_data = nil); end
  def max(*args, &block); end
  def mean(*args, &block); end
  def measure(&block); end
  def min(*args, &block); end
  def rate(*args, &block); end
  def running?; end
  def self.now(name, additional_data = nil); end
  def split; end
  def start; end
  def stats; end
  def stddev(*args, &block); end
  def stop; end
  def sum(*args, &block); end
  def sumsq(*args, &block); end
  def to_hash; end
  extend Forwardable
end
class Hitimes::TimedValueMetric < Hitimes::Metric
  def duration; end
  def initialize(name, additional_data = nil); end
  def measure(value, &block); end
  def rate; end
  def running?; end
  def self.now(name, additional_data = nil); end
  def split(value); end
  def start; end
  def stop(value); end
  def timed_stats; end
  def to_hash; end
  def unit_count; end
  def value_stats; end
end
class Hitimes::Error < StandardError
end
